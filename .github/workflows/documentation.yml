name: Documentation

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'docs/**'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - '*.md'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - '*.md'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install validation tools
      run: |
        pip install markdown
        npm install -g markdown-link-check

    - name: Validate markdown syntax
      run: |
        pip install markdown
        python -c "
        import markdown, glob, sys
        files = glob.glob('**/*.md', recursive=True)
        for f in files:
            if '/.git/' not in f and '/node_modules/' not in f:
                try:
                    with open(f) as file: markdown.markdown(file.read())
                    print(f'✅ {f} OK')
                except Exception as e:
                    print(f'❌ {f} error: {e}'); sys.exit(1)
        "

    - name: Check internal links
      run: |
        # Check for broken internal links in markdown files
        find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
          echo "Checking internal links in $file"
          # Extract relative links and check if files exist
          grep -oE '\[.*\]\([^http][^)]*\)' "$file" | grep -oE '\([^)]*\)' | tr -d '()' | while read link; do
            if [[ -n "$link" && "$link" != "#"* ]]; then
              target_file=$(dirname "$file")/"$link"
              if [[ ! -f "$target_file" && ! -d "$target_file" ]]; then
                echo "❌ Broken internal link in $file: $link"
                exit 1
              fi
            fi
          done
        done

    - name: Check documentation completeness
      run: |
        # Ensure key documentation files exist
        required_docs=("README.md" "CONTRIBUTING.md" "docs/EXAMPLES.md" "docs/ARCHITECTURE.md")
        for doc in "${required_docs[@]}"; do
          if [[ ! -f "$doc" ]]; then
            echo "❌ Missing required documentation: $doc"
            exit 1
          else
            echo "✅ Found: $doc"
          fi
        done

    - name: Validate code examples in docs
      run: |
        python -c "
        import re, ast, glob
        for f in glob.glob('**/*.md', recursive=True):
            if '/.git/' not in f and '/node_modules/' not in f:
                with open(f) as file: content = file.read()
                blocks = re.findall(r'```python\n(.*?)\n```', content, re.DOTALL)
                for i, block in enumerate(blocks):
                    if any(x in block for x in ['import', 'def ', 'class ']):
                        try: ast.parse(block); print(f'✅ Code block {i+1} in {f} OK')
                        except SyntaxError as e: print(f'❌ Syntax error in {f}: {e}')
        "

  build-docs:
    name: Build Documentation Site
    runs-on: ubuntu-latest
    needs: validate-docs
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
        pip install -r requirements.txt

    - name: Create mkdocs config
      run: |
        cat > mkdocs.yml << 'MKDOCS_CONFIG'
        site_name: AI Shell Documentation
        site_description: An intelligent, multi-modal command-line assistant
        site_url: https://gizzmo.github.io/Ai_shell/
        repo_url: https://github.com/GizzZmo/Ai_shell
        repo_name: GizzZmo/Ai_shell

        theme:
          name: material
          palette:
            - scheme: default
              primary: blue
              accent: blue
              toggle:
                icon: material/brightness-7
                name: Switch to dark mode
            - scheme: slate
              primary: blue
              accent: blue
              toggle:
                icon: material/brightness-4
                name: Switch to light mode
          features:
            - navigation.tabs
            - navigation.sections
            - navigation.top
            - search.highlight
            - content.code.copy

        nav:
          - Home: index.md
          - Examples: docs/EXAMPLES.md
          - Architecture: docs/ARCHITECTURE.md
          - Troubleshooting: docs/TROUBLESHOOTING.md
          - Contributing: CONTRIBUTING.md

        plugins:
          - search

        markdown_extensions:
          - admonition
          - codehilite
          - pymdownx.superfences
        MKDOCS_CONFIG

    - name: Create index.md from README
      run: |
        mkdir -p docs
        cp README.md docs/index.md

    - name: Build documentation
      run: mkdocs build

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './site'

  deploy-docs:
    name: Deploy Documentation
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4